# -*- coding: utf-8 -*-
"""EV_Sales.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1svFVzAQnf2fnC-X4f4Elq8QHkW_XS_ti
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

# Load the dataset
file_path = '/content/EV_Sales.csv'  # Replace with your actual file path
dataframe = pd.read_csv(file_path)

# Display the first few rows to identify columns with percentage values
print(dataframe.head())

# Identify columns with percentage values
percentage_columns = [col for col in dataframe.columns if dataframe[col].astype(str).str.contains('%').any()]
print(f"Columns with percentage values: {percentage_columns}")

# Clean percentage columns
for col in percentage_columns:
    dataframe[col] = dataframe[col].str.replace('%', '').str.replace(',', '').astype(float)

# Display the cleaned data
print(dataframe.head())

# Select relevant columns
df = dataframe[["year", "value", "percentage"]]

# Drop rows with missing values
df.dropna(inplace=True)

# Convert all data to numeric format (if necessary)
df = df.apply(pd.to_numeric, errors='coerce')

# Check for missing values and drop if any
df.dropna(inplace=True)

# Sample 500 rows from the dataset
df_sampled = df.sample(n=500, random_state=42)

# Define the features (X) and the target (y)
X = df_sampled.drop(columns=['value'])  # Replace 'value' with the actual target column name if different
y = df_sampled['value']  # Replace 'value' with the actual target column name if different

# Ensure no NaN values in X and y
print(f"X contains NaN values: {X.isnull().values.any()}")
print(f"y contains NaN values: {y.isnull().values.any()}")

# Normalize numerical features
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

# Initialize and train the linear regression model
model = LinearRegression()
model.fit(X_train, y_train)

# Make predictions on the test set
y_pred = model.predict(X_test)

# Calculate the Mean Squared Error and R-squared
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f'Mean Squared Error: {mse:.2f}')
print(f'R-squared: {r2:.2f}')

# Calculate the accuracy
accuracy = model.score(X_test, y_test)
print(f'Accuracy: {accuracy * 100:.2f}%')

# Output 
 region    category       parameter   mode powertrain  year      unit  \
0  Austria  Historical        EV stock   Cars        BEV  2010  Vehicles   
1  Austria  Historical  EV stock share   Cars         EV  2010   percent   
2  Belgium  Historical        EV stock  Buses        BEV  2010  Vehicles   
3  Belgium  Historical        EV sales   Vans        BEV  2010  Vehicles   
4  Belgium  Historical        EV stock   Vans        BEV  2010  Vehicles   

             value          percentage  
0              350           35000,00%  
1  789.999.961.853  78999996185300,00%  
2                3             300,00%  
3                7             700,00%  
4               62            6200,00%  
Columns with percentage values: ['percentage']
    region    category       parameter   mode powertrain  year      unit  \
0  Austria  Historical        EV stock   Cars        BEV  2010  Vehicles   
1  Austria  Historical  EV stock share   Cars         EV  2010   percent   
2  Belgium  Historical        EV stock  Buses        BEV  2010  Vehicles   
3  Belgium  Historical        EV sales   Vans        BEV  2010  Vehicles   
4  Belgium  Historical        EV stock   Vans        BEV  2010  Vehicles   

             value    percentage  
0              350  3.500000e+06  
1  789.999.961.853  7.900000e+15  
2                3  3.000000e+04  
3                7  7.000000e+04  
4               62  6.200000e+05  
X contains NaN values: False
y contains NaN values: False
Mean Squared Error: 225620.05
R-squared: 1.00
Accuracy: 100.00%
<ipython-input-21-f11221215381>:32: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  df.dropna(inplace=True)


