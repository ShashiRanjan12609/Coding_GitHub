# -*- coding: utf-8 -*-
"""UPI_Transaction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19A0MX3LDUDHfyLPTn3xTZ4SkC0h1cKk2
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.preprocessing import LabelEncoder
from sklearn.cluster import KMeans
from sklearn.metrics import silhouette_score

df=pd.read_csv("/content/MyTransaction.csv")

df.head()

df.isnull().sum()

df.dropna(inplace=True)

df.isnull().sum()

df.shape

df.dtypes

# preprocessing the dataset

le=LabelEncoder()
df['Date']=le.fit_transform(df['Date'])
df['Category']=le.fit_transform(df['Category'])
df['RefNo']=le.fit_transform(df['RefNo'])
df['Date.1']=le.fit_transform(df['Date.1'])

sc=StandardScaler()
sc_data=sc.fit_transform(df)

df=df.drop(columns='Date',axis=1)

df.head()

# split the dataset into dependent and independent features

x=df.drop(columns='Balance')
y=df['Balance']

# split the dataset into train and test dataset

x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=42)

# model creating and initiate this model

model=KMeans(n_clusters=3)
model.fit(x_train)

y_pred=model.predict(x_test)

# plot the diagram

# Check the available columns in x_test
print(x_test.columns)

# Replace 'Amount' with an actual column name from x_test
plt.scatter(x_test['Category'],y_test,c=y_pred)

# plot the diagram

import matplotlib.pyplot as plt
from sklearn.cluster import KMeans

# Assuming you have your data in a variable named 'X'
# Calculate WCSS for different numbers of clusters

wcss = []  # Initialize an empty list to store WCSS values
for i in range(1, 11):
    kmeans = KMeans(n_clusters=i, random_state=42)
    kmeans.fit(x)
    wcss.append(kmeans.inertia_)

# Plot the Elbow Method result
plt.plot(range(1, 11), wcss)
plt.title('Elbow Method')
plt.xlabel('Number of Clusters')
plt.ylabel('WCSS')
plt.show()

# Evaluate the model using silhouette score
silhouette_avg = silhouette_score(x_test, y_pred)
print("The average silhouette score is:", silhouette_avg)

accuracy_score=model.score(x_test)







