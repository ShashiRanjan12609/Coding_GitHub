# -*- coding: utf-8 -*-
"""DesigionTreeClassifier.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ht-0rNjdevX0hlz2XRSeMeVgOiRPepYm
"""



# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import matplotlib.pyplot as plt
# %matplotlib inline

from sklearn.datasets import load_iris

iris=load_iris()

iris

iris.data

import seaborn as sns
df=sns.load_dataset('iris')

df

# independent and dependent features

x=df.iloc[:,:-1]
y=df.iloc[:,-1]

x

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.3,random_state=45)

from sklearn.tree import DecisionTreeClassifier
dt=DecisionTreeClassifier(max_depth=2)
dt.fit(x_train,y_train)

from sklearn import tree
plt.figure(figsize=(15,10))
tree.plot_tree(dt,filled=True)

y_pred=dt.predict(x_test)

y_pred

from sklearn.preprocessing import LabelEncoder as le
Le=le()
y=Le.fit_transform(y)

y

from sklearn.metrics import accuracy_score,confusion_matrix,classification_report
accuracy_score(y_test,y_pred)
print(accuracy_score)
confusion_matrix(y_test,y_pred)
print(confusion_matrix)
print(classification_report(y_test,y_pred))

plt.figure(figsize=(15,10))
plt.plot(y_test,y_pred)
plt.show()



plt.figure(figsize=(15,8))
plt.scatter(y_test,y_pred)
plt.show()

print(classification_report(y_test,y_pred))

print(accuracy_score)





# preprunning

parameter={
    'criterion':['gini','entropy','log_loss'],
    'splitter':['best','random'],
    'max_depth':[1,2,3,4,5],
    'max_features':['auto','sqrt','log2'],
    'cpp_alpha':[1,2,3,4,5]

}

# preprunning

parameter={
    'criterion':['gini','entropy','log_loss'],
    'splitter':['best','random'],
    'max_depth':[1,2,3,4,5],
    'max_features':['auto','sqrt','log2']

}

from sklearn.model_selection import GridSearchCV
dt=DecisionTreeClassifier()
cv=GridSearchCV(dt,param_grid=parameter,cv=5,scoring='accuracy')
cv.fit(x_train,y_train)

cv.best_params_

y_pred=cv.predict(x_test)

print(classification_report(y_test,y_pred))

score=cv.best_score_

score

# code ends here at 19-08-2024 19:53 PM


